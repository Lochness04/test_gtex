library(CePa)
library(dplyr)

setwd("C:/Users/nt301/Downloads")

###GTEX FULL TABLE > DF.ANNOT

#GTEx gene read count [DF]
DF = read.gct(file = 'GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_reads.gct')
#DF = read.delim('GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_reads.gct', sep = '\t', 
#                colClasses = c(rep("character", 2), rep("NULL", 200)),header = FALSE)
DF = as.data.frame(DF) #or as.matrix()?
colnames(DF) = gsub(".", "-", colnames(DF), fixed = TRUE)
#DF ~56000 obs. 17382 var. | colnames - 17382 IDs

#but DF contains only sample id, I need annotation 

#extract [SAMPID.SMTS.SMTSISCH] from annotation, and there are more IDs - 22951 in annotation vs 17382 in GTEx DF
annotation = read.delim("GTEx_Analysis_v8_Annotations_SampleAttributesDS.txt", header = TRUE, sep = "\t")
SAMPID.SMTS.SMTSISCH = annotation[,c("SAMPID","SMTS","SMTSISCH")]
#SAMPID.SMTS.SMTSISCH 22951 obs. 3 var. | colnames - "SAMPID","SMTS", "SMTSISCH"

#extract [SAMPID] - GTEx IDs are colnames of GTEx df
SAMPID = gsub(".", "-", colnames(DF), fixed = TRUE)
SAMPID = as.data.frame(SAMPID)
colnames(SAMPID) = 'SAMPID'
#SAMPID 17382 obs. 1 var. | colnames - "SAMPID"

#join [SAMPID] from GTEx DF and [SAMPID, SMTS, SMTSISCH] from annotation > [ANNOT]
ANNOT = left_join(SAMPID, SAMPID.SMTS.SMTSISCH)
#ANNOT 17382 obs. 3 var. | colnames "SAMPID","SMTS","SMTSISCH"

#transpose [ANNOT]
ANNOT = t(ANNOT)
colnames(ANNOT) = ANNOT[1,]
#ANNOT 3 obs. 17382 var. | colnames - 17382 IDs

#rbind GTEx gene read counts [DF] and [ANNOT]
DF.ANNOT = rbind(DF, ANNOT)

###FIND 10 RANDOM SAMPLES OF EACH TISSUE ('Colon', 'Lung'..) AND ASSIGN A TYPE/LABEL FOR EACH SAMPLE ('C-GTEx', 'Lu-GTEx') > GTEmini

find10randomGTEx = function(tissue, type){
  c = data.frame(DF.ANNOT[,which(DF.ANNOT["SMTS",]==tissue)])
  c = sample(c, 10, replace = F)
  c$ensembl = rownames(c)
  colnames(c)[1:10] = rep(type, 10)
  return(c)
}

set.seed(1)

Colon = find10randomGTEx('Colon','C-GTEx')
Stomach = find10randomGTEx('Stomach','G-GTEx')
Lung = find10randomGTEx('Lung','Lu-GTEx')
Pancreas = find10randomGTEx('Pancreas','P-GTEx')
Kidney = find10randomGTEx('Kidney','K-GTEx')
Brain = find10randomGTEx('Brain','NS-GTEx')
Blood = find10randomGTEx('Blood','B-GTEx')
Thyroid = find10randomGTEx('Thyroid','Th-GTEx')

#create [GTEmini] of 8 tissue type x 10 samples
GTEmini = Reduce(function(x, y) merge(x, y, all=TRUE), list(Colon, Stomach, Lung,
                                                      Pancreas, Kidney,
                                                      Brain, Blood, Thyroid))
                                                      
#colnames(GTEmini) = gsub("\\.[0-9]*$", "", colnames(GTEmini)) #not sure if this is needed
# - "SAMPID","SMTS","SMTSISCH" rows! need a check
GTEmini = GTEmini[-c(dim(GTEmini)[1], dim(GTEmini)[1]-1, dim(GTEmini)[1]-2),]

### FIN
### TCGAnorm, TCGAtumor, GTEXnorm, OBnorm, OBtumor, NCItumor>
### >FIN


FIN = Reduce(function(x, y) merge(x, y), list(TCGAnorm, TCGAtumor, GTEXnorm, OBnorm, OBtumor, NCItumor))

### ASSIGN COLORS FOR PLOT AND CREATE VECTOR FOR TISSUE, DATABASE, MALIGNANCY
### FIN>
### >COLORS, VECTORS
colnames_FIN = gsub('\\.[0-9]*$', '', colnames(FIN))

assign_value = function(vector,search,value){
  c = rep(0, length(vector))
  for (i in 1:length(vector)){
    for (j in 1:length(search)){
      if (str_detect(vector[i], search[j], negate = FALSE)){
        c[i] = value[j]
      }
      else{
        next
      }
    }
  }
  return(c)
}

tissue = c('Colon','Stomach',"Lung","Pancreas","Kidney","Brain","Blood","Thyroid")
tissue_color = c("#56B4E9","#D55E00","#F0E442","#0072B2","#009E73","#E69F00","#000000","#CC79A7")
vector_tissue = assign_value(colnames(FIN), tissue, tissue)
color_tissue = assign_value(colnames(FIN), tissue, tissue_color)

database = c('TCGA','GTEx','NCI','OB')
database_color = c('blue','red','yellow','grey')
vector_database = assign_value(colnames(FIN), type, type)
color_database = assign_value(colnames(FIN), type, type_color)

malignancy = c('Tumor','Norm')
malignancy_color = c("violet",'chartreuse3')
vector_malignancy = assign_value(colnames(FIN), malignancy, malignancy)
color_malignancy = assign_value(colnames(FIN), malignancy, malignancy_color)

COLORS = c(color_tissue, color_database, color_malignancy)
COLORS = matrix(COLORS, ncol = 3)
colnames(COLORS) = c('Tissue','Database','Malignancy')

VECTORS = c(vector_tissue, vector_database, vector_malignancy)
VECTORS = matrix(VECTORS, ncol = 3)
colnames(VECTORS) = c('Tissue','Database','Malignancy')

### NORMALIZATION 
### FIN>
### >NORM
NORM = as.data.frame(sapply(FIN, as.numeric))
NORM = NORM + 1
NORM = normalize.quantiles(as.matrix(NORM), copy = T)
NORM = log10(NORM)
rownames(NORM) = rownames(FIN)
colnames(NORM) = colnames(FIN)

### DENDRO 
### NORM>
### >DEND
DEND = t(NORM)
DEND = dist(DEND, method = 'euclidian')
DEND = hclust(DEND, method = 'ward.D2')
DEND = as.dendrogram(DEND)

### PLOT 
### DEND, COLORS>

plot(dend, axes=FALSE)
colored_bars(colors = COLORS, dend = DEND)
